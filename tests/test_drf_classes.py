#!/usr/bin/env python3
import requests
import json

BASE_URL = "http://localhost:8000/api/v1"

def get_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = f"{BASE_URL}/auth/login/"
    data = {
        "username": "testuser456",
        "password": "testpass123"
    }
    response = requests.post(url, json=data)
    if response.status_code == 200:
        return response.json()['tokens']['access']
    return None

def test_refresh_token():
    """–¢–µ—Å—Ç RefreshTokenView (APIView)"""
    # –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è refresh —Ç–æ–∫–µ–Ω–∞
    url = f"{BASE_URL}/auth/login/"
    data = {
        "username": "testuser456",
        "password": "testpass123"
    }
    response = requests.post(url, json=data)
    
    if response.status_code == 200:
        refresh_token = response.json()['tokens']['refresh']
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º refresh
        url = f"{BASE_URL}/auth/refresh/"
        data = {"refresh": refresh_token}
        response = requests.post(url, json=data)
        
        print(f"üîÑ REFRESH TOKEN (APIView): {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ù–æ–≤—ã–π access —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {result['access'][:20]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å refresh —Ç–æ–∫–µ–Ω")

def test_profile_retrieve(token):
    """–¢–µ—Å—Ç ProfileView (RetrieveAPIView)"""
    url = f"{BASE_URL}/auth/profile/"
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(url, headers=headers)
    print(f"üë§ PROFILE (RetrieveAPIView): {response.status_code}")
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {result['username']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

def test_user_viewset_crud(token):
    """–¢–µ—Å—Ç UserViewSet (ModelViewSet)"""
    headers = {"Authorization": f"Bearer {token}"}
    
    # GET (list) - ListAPIView —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    url = f"{BASE_URL}/users/"
    response = requests.get(url, headers=headers)
    print(f"üìã USERS LIST (ModelViewSet): {response.status_code}")
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ: {result['count']}")
        
        if result['results']:
            user_id = result['results'][0]['id']
            
            # GET (retrieve) - RetrieveAPIView —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª  
            url = f"{BASE_URL}/users/{user_id}/"
            response = requests.get(url, headers=headers)
            print(f"üë§ USER DETAIL (ModelViewSet): {response.status_code}")
            if response.status_code == 200:
                user = response.json()
                print(f"‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user['username']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

def test_registration_create():
    """–¢–µ—Å—Ç RegisterView (CreateAPIView)"""
    import random
    user_id = random.randint(1000, 9999)
    url = f"{BASE_URL}/auth/register/"
    data = {
        "username": f"testcreate{user_id}",
        "first_name": "Create",
        "last_name": "Test", 
        "email": f"create{user_id}@test.com",
        "password": "testpass123",
        "password_confirm": "testpass123",
        "role": "provider",
        "location": "Test City"
    }
    
    response = requests.post(url, json=data)
    print(f"‚ú® REGISTER (CreateAPIView): {response.status_code}")
    if response.status_code == 201:
        result = response.json()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {result['user']['username']}")
        print(f"üé≠ –†–æ–ª—å: {result['user']['role']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

def test_swagger_api():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Swagger"""
    url = "http://localhost:8000/swagger/"
    response = requests.get(url)
    print(f"üìö SWAGGER UI: {response.status_code}")
    if response.status_code == 200:
        print("‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print(f"‚ùå Swagger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")

if __name__ == "__main__":
    print("üèóÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DRF –ö–õ–ê–°–°–û–í –ò –ê–†–•–ò–¢–ï–ö–¢–£–†–´\n")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        exit()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ DRF –∫–ª–∞—Å—Å—ã
    test_registration_create()  # CreateAPIView
    print()
    
    test_profile_retrieve(token)  # RetrieveAPIView  
    print()
    
    test_refresh_token()  # APIView
    print()
    
    test_user_viewset_crud(token)  # ModelViewSet
    print()
    
    test_swagger_api()  # Swagger –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    print()
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DRF –ö–õ–ê–°–°–û–í –ó–ê–í–ï–†–®–ï–ù–û")