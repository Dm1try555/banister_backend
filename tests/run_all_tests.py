#!/usr/bin/env python3
"""
üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Banister Backend API

–≠—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç.
"""

import subprocess
import sys
import time

def run_test(test_file, test_name):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üß™ –ó–ê–ü–£–°–ö: {test_name}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run([
            'python', f'/app/tests/{test_file}'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print(result.stdout)
            return True, result.stdout
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ {test_file}:")
            print(result.stderr)
            return False, result.stderr
            
    except subprocess.TimeoutExpired:
        print(f"‚ùå –¢–ê–ô–ú–ê–£–¢: {test_file} –ø—Ä–µ–≤—ã—Å–∏–ª 30 —Å–µ–∫—É–Ω–¥")
        return False, "Timeout"
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {test_file}: {e}")
        return False, str(e)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BANISTER BACKEND API")
    print("="*70)
    
    tests = [
        ("test_api.py", "–ë–∞–∑–æ–≤–æ–µ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        ("test_admin.py", "–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
        ("test_permissions.py", "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"),
        ("test_drf_classes.py", "DRF –∫–ª–∞—Å—Å—ã –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"),
        ("test_pagination_minio.py", "–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ MinIO"),
        ("test_cron_smtp.py", "–ö—Ä–æ–Ω –∑–∞–¥–∞—á–∏ –∏ SMTP")
    ]
    
    results = []
    start_time = time.time()
    
    for test_file, test_name in tests:
        success, output = run_test(test_file, test_name)
        results.append((test_name, success, len(output.split('\n')) if success else 0))
        
        if not success:
            print(f"\n‚ö†Ô∏è –¢–ï–°–¢ {test_name} –ü–†–û–í–ê–õ–ï–ù!")
        
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    end_time = time.time()
    total_time = end_time - start_time
    
    print(f"\n{'='*70}")
    print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*70}")
    
    passed = sum(1 for _, success, _ in results if success)
    total = len(results)
    
    for test_name, success, lines in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:12} | {test_name:30} | {lines:3} —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞")
    
    print(f"\nüéØ –ò–¢–û–ì–û:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    if passed == total:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)