#!/usr/bin/env python3
import sys
import os
sys.path.append('/app')

import requests
import json

BASE_URL = os.getenv('BASE_URL', "http://localhost:8000/api/v1")

def get_admin_token():
    url = f"{BASE_URL}/auth/login/"
    data = {
        "username": "testadmin",
        "password": "admin123"
    }
    response = requests.post(url, json=data)
    if response.status_code == 200:
        return response.json()['tokens']['access']
    return None

def test_chat_rooms():
    print("üè† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ê–¢ –ö–û–ú–ù–ê–¢")
    print("=" * 40)
    
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return None
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    room_data = {
        "name": "Test Private Room",
        "is_private": True
    }
    
    response = requests.post(f"{BASE_URL}/chat/rooms/", json=room_data, headers=headers)
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: {response.status_code}")
    
    if response.status_code == 201:
        room = response.json()
        room_id = room['id']
        print(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {room['name']} (ID: {room_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        response = requests.get(f"{BASE_URL}/chat/rooms/", headers=headers)
        if response.status_code == 200:
            rooms = response.json()
            print(f"üìã –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: {len(rooms['results']) if 'results' in rooms else len(rooms)}")
        
        return room_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {response.text}")
        return None

def test_chat_messages(room_id):
    print("\nüí¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 40)
    
    if not room_id:
        print("‚ùå –ù–µ—Ç ID –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    token = get_admin_token()
    headers = {"Authorization": f"Bearer {token}"}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_data = {
        "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ."
    }
    
    response = requests.post(f"{BASE_URL}/chat/rooms/{room_id}/messages/", 
                           json=message_data, headers=headers)
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
    
    if response.status_code == 201:
        message = response.json()
        message_id = message['id']
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID {message_id}")
        print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {message['content'][:50]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        response = requests.get(f"{BASE_URL}/chat/rooms/{room_id}/messages/", headers=headers)
        if response.status_code == 200:
            messages = response.json()
            count = len(messages['results']) if 'results' in messages else len(messages)
            print(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ: {count}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        update_data = {
            "content": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        }
        response = requests.patch(f"{BASE_URL}/chat/rooms/{room_id}/messages/{message_id}/", 
                                json=update_data, headers=headers)
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = requests.delete(f"{BASE_URL}/chat/rooms/{room_id}/messages/{message_id}/", 
                                 headers=headers)
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
        if response.status_code == 204:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        
        return message_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
        return None

def test_websocket_connection():
    print("\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è WebSocket")
        return
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –¥–ª—è WebSocket: {token[:20]}...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    print("üì° WebSocket URL: ws://localhost:8000/ws/chat/1/?token=JWT_TOKEN")
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä")
    print("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã")

def test_chat_functionality():
    print("üí¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ß–ê–¢–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã
    room_id = test_chat_rooms()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if room_id:
        test_chat_messages(room_id)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_websocket_connection()
    
    print(f"\nüéØ –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ß–ê–¢–ê:")
    print("‚úÖ HTTP API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT")
    print("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã")
    print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
    print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("‚úÖ WebSocket –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")

if __name__ == "__main__":
    test_chat_functionality()