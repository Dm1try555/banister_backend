#!/usr/bin/env python3
import requests
from django.core import mail
from django.test.utils import override_settings

BASE_URL = "http://localhost:8000/api/v1"

def get_admin_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞"""
    url = f"{BASE_URL}/auth/login/"
    data = {"username": "testadmin", "password": "admin123"}
    response = requests.post(url, json=data)
    if response.status_code == 200:
        return response.json()['tokens']['access']
    return None

def test_smtp_configuration():
    """–¢–µ—Å—Ç SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üìß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SMTP –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    
    # –°–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
    url = f"{BASE_URL}/auth/register/"
    import random
    user_id = random.randint(1000, 9999)
    data = {
        "username": f"smtptest{user_id}",
        "first_name": "SMTP",
        "last_name": "Test",
        "email": f"smtp{user_id}@example.com",
        "password": "testpass123",
        "password_confirm": "testpass123",
        "role": "customer",
        "location": "Test City"
    }
    
    response = requests.post(url, json=data)
    if response.status_code == 201:
        email = data['email']
        
        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email
        url = f"{BASE_URL}/auth/send-verification/"
        data = {"email": email}
        
        response = requests.post(url, json=data)
        print(f"üì§ –û–¢–ü–†–ê–í–ö–ê EMAIL: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ SMTP: {response.text}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.text}")

def test_cron_tasks_endpoints():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫—Ä–æ–Ω –∑–∞–¥–∞—á"""
    print("‚è∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–û–ù –ó–ê–î–ê–ß")
    
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞")
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –¢–µ—Å—Ç cleanup —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç notifications)
    url = f"{BASE_URL}/notifications/"
    response = requests.get(url, headers=headers)
    
    print(f"üîî –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô: {response.status_code}")
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {result['count']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

def test_celery_beat_schedule():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Celery beat –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"""
    print("üìÖ –ü–†–û–í–ï–†–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø CELERY")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    try:
        with open('/app/banister_backend/celery.py', 'r') as f:
            content = f.read()
            
        tasks = [
            'database-backup',
            'minio-backup',
            'cleanup-old-notifications'
        ]
        
        for task in tasks:
            if task in content:
                print(f"‚úÖ {task}: –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            else:
                print(f"‚ùå {task}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def test_backup_service():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤"""
    print("üíæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í –ë–ï–ö–ê–ü–û–í")
    
    import os
    files_to_check = [
        '/app/core/backup/service.py',
        '/app/core/backup/tasks.py',
        '/app/core/backup/__init__.py'
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–û–ù –ó–ê–î–ê–ß –ò SMTP\n")
    
    # –¢–µ—Å—Ç SMTP
    test_smtp_configuration()
    print()
    
    # –¢–µ—Å—Ç –∫—Ä–æ–Ω –∑–∞–¥–∞—á
    test_cron_tasks_endpoints()
    print()
    
    # –¢–µ—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è Celery
    test_celery_beat_schedule()
    print()
    
    # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤
    test_backup_service()
    print()
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–û–ù –ó–ê–î–ê–ß –ò SMTP –ó–ê–í–ï–†–®–ï–ù–û")