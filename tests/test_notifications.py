#!/usr/bin/env python3
import requests
import json
import os

BASE_URL = os.getenv('BASE_URL', "http://localhost:8000/api/v1")

def get_admin_token():
    url = f"{BASE_URL}/auth/login/"
    data = {
        "username": "testadmin",
        "password": "admin123"
    }
    response = requests.post(url, json=data)
    if response.status_code == 200:
        return response.json()['tokens']['access']
    return None

def test_notification_crud():
    print("üîî –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_response = requests.get(f"{BASE_URL}/auth/profile/", headers=headers)
    if profile_response.status_code != 200:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        return
    
    user_id = profile_response.json()['id']
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
    notification_data = {
        "user": user_id,
        "notification_type": "ClientSendBookingNotificationToAdmin",
        "data": {
            "booking_id": 123,
            "message": "New booking request"
        }
    }
    
    response = requests.post(f"{BASE_URL}/notifications/", 
                           json=notification_data, headers=headers)
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ: {response.status_code}")
    
    if response.status_code == 201:
        notification = response.json()
        notification_id = notification['id']
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ID {notification_id}")
        print(f"   –¢–∏–ø: {notification['notification_type']}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\nüìã –°–ü–ò–°–û–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:")
        response = requests.get(f"{BASE_URL}/notifications/", headers=headers)
        print(f"–°–ø–∏—Å–æ–∫: {response.status_code}")
        
        if response.status_code == 200:
            notifications = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications['count']}")
        
        # 3. –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        print("\nüëÅÔ∏è –ü–û–ú–ï–¢–ò–¢–¨ –ö–ê–ö –ü–†–û–ß–ò–¢–ê–ù–ù–û–ï:")
        response = requests.post(f"{BASE_URL}/notifications/{notification_id}/mark_read/", 
                               headers=headers)
        print(f"–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
        
        # 4. –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
        response = requests.delete(f"{BASE_URL}/notifications/{notification_id}/", 
                                 headers=headers)
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ: {response.status_code}")
        
        if response.status_code == 204:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.text}")

def test_bulk_operations():
    print("\nüì¶ –¢–ï–°–¢ –ú–ê–°–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_response = requests.get(f"{BASE_URL}/auth/profile/", headers=headers)
    user_id = profile_response.json()['id']
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for i in range(3):
        notification_data = {
            "user": user_id,
            "notification_type": f"TestNotification{i+1}",
            "data": {"test": f"data{i+1}"}
        }
        
        response = requests.post(f"{BASE_URL}/notifications/", 
                               json=notification_data, headers=headers)
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ {i+1}: {response.status_code}")
    
    # –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    print("\nüëÅÔ∏è –ü–û–ú–ï–¢–ò–¢–¨ –í–°–ï –ö–ê–ö –ü–†–û–ß–ò–¢–ê–ù–ù–´–ï:")
    response = requests.post(f"{BASE_URL}/notifications/mark_all_read/", headers=headers)
    print(f"–ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ: {response.status_code}")
    
    if response.status_code == 200:
        print("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
    
    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("\nüóëÔ∏è –£–î–ê–õ–ò–¢–¨ –í–°–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
    response = requests.delete(f"{BASE_URL}/notifications/delete_all/", headers=headers)
    print(f"–£–¥–∞–ª–∏—Ç—å –≤—Å–µ: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ {result['status']}")

def test_pagination():
    print("\nüìÑ –¢–ï–°–¢ –ü–ê–ì–ò–ù–ê–¶–ò–ò")
    
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(f"{BASE_URL}/notifications/?page=1", headers=headers)
    print(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: {len(data.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print(f"   –í—Å–µ–≥–æ: {data.get('count', 0)}")
        print(f"   –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {'–î–∞' if data.get('next') else '–ù–µ—Ç'}")

if __name__ == "__main__":
    print("üîî –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    test_notification_crud()
    test_bulk_operations()
    test_pagination()
    
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–û")